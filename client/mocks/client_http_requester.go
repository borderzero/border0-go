// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ClientHTTPRequester is an autogenerated mock type for the HTTPRequester type
type ClientHTTPRequester struct {
	mock.Mock
}

type ClientHTTPRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientHTTPRequester) EXPECT() *ClientHTTPRequester_Expecter {
	return &ClientHTTPRequester_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *ClientHTTPRequester) Close() {
	_m.Called()
}

// ClientHTTPRequester_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ClientHTTPRequester_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *ClientHTTPRequester_Expecter) Close() *ClientHTTPRequester_Close_Call {
	return &ClientHTTPRequester_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *ClientHTTPRequester_Close_Call) Run(run func()) *ClientHTTPRequester_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientHTTPRequester_Close_Call) Return() *ClientHTTPRequester_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientHTTPRequester_Close_Call) RunAndReturn(run func()) *ClientHTTPRequester_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields: ctx, method, path, input, output
func (_m *ClientHTTPRequester) Request(ctx context.Context, method string, path string, input interface{}, output interface{}) (int, error) {
	ret := _m.Called(ctx, method, path, input, output)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}) (int, error)); ok {
		return rf(ctx, method, path, input, output)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}) int); ok {
		r0 = rf(ctx, method, path, input, output)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, interface{}) error); ok {
		r1 = rf(ctx, method, path, input, output)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientHTTPRequester_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type ClientHTTPRequester_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - path string
//   - input interface{}
//   - output interface{}
func (_e *ClientHTTPRequester_Expecter) Request(ctx interface{}, method interface{}, path interface{}, input interface{}, output interface{}) *ClientHTTPRequester_Request_Call {
	return &ClientHTTPRequester_Request_Call{Call: _e.mock.On("Request", ctx, method, path, input, output)}
}

func (_c *ClientHTTPRequester_Request_Call) Run(run func(ctx context.Context, method string, path string, input interface{}, output interface{})) *ClientHTTPRequester_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(interface{}))
	})
	return _c
}

func (_c *ClientHTTPRequester_Request_Call) Return(_a0 int, _a1 error) *ClientHTTPRequester_Request_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientHTTPRequester_Request_Call) RunAndReturn(run func(context.Context, string, string, interface{}, interface{}) (int, error)) *ClientHTTPRequester_Request_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewClientHTTPRequester interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientHTTPRequester creates a new instance of ClientHTTPRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientHTTPRequester(t mockConstructorTestingTNewClientHTTPRequester) *ClientHTTPRequester {
	mock := &ClientHTTPRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
