// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	reqedit "github.com/borderzero/border0-go/client/reqedit"
	mock "github.com/stretchr/testify/mock"
)

// ClientHTTPRequester is an autogenerated mock type for the HTTPRequester type
type ClientHTTPRequester struct {
	mock.Mock
}

type ClientHTTPRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientHTTPRequester) EXPECT() *ClientHTTPRequester_Expecter {
	return &ClientHTTPRequester_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *ClientHTTPRequester) Close() {
	_m.Called()
}

// ClientHTTPRequester_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ClientHTTPRequester_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *ClientHTTPRequester_Expecter) Close() *ClientHTTPRequester_Close_Call {
	return &ClientHTTPRequester_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *ClientHTTPRequester_Close_Call) Run(run func()) *ClientHTTPRequester_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientHTTPRequester_Close_Call) Return() *ClientHTTPRequester_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClientHTTPRequester_Close_Call) RunAndReturn(run func()) *ClientHTTPRequester_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields: ctx, method, path, input, output, edits
func (_m *ClientHTTPRequester) Request(ctx context.Context, method string, path string, input interface{}, output interface{}, edits ...reqedit.EditRequestFunc) (int, error) {
	_va := make([]interface{}, len(edits))
	for _i := range edits {
		_va[_i] = edits[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, method, path, input, output)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}, ...reqedit.EditRequestFunc) (int, error)); ok {
		return rf(ctx, method, path, input, output, edits...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}, ...reqedit.EditRequestFunc) int); ok {
		r0 = rf(ctx, method, path, input, output, edits...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, interface{}, ...reqedit.EditRequestFunc) error); ok {
		r1 = rf(ctx, method, path, input, output, edits...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientHTTPRequester_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type ClientHTTPRequester_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - path string
//   - input interface{}
//   - output interface{}
//   - edits ...reqedit.EditRequestFunc
func (_e *ClientHTTPRequester_Expecter) Request(ctx interface{}, method interface{}, path interface{}, input interface{}, output interface{}, edits ...interface{}) *ClientHTTPRequester_Request_Call {
	return &ClientHTTPRequester_Request_Call{Call: _e.mock.On("Request",
		append([]interface{}{ctx, method, path, input, output}, edits...)...)}
}

func (_c *ClientHTTPRequester_Request_Call) Run(run func(ctx context.Context, method string, path string, input interface{}, output interface{}, edits ...reqedit.EditRequestFunc)) *ClientHTTPRequester_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]reqedit.EditRequestFunc, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(reqedit.EditRequestFunc)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *ClientHTTPRequester_Request_Call) Return(_a0 int, _a1 error) *ClientHTTPRequester_Request_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientHTTPRequester_Request_Call) RunAndReturn(run func(context.Context, string, string, interface{}, interface{}, ...reqedit.EditRequestFunc) (int, error)) *ClientHTTPRequester_Request_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientHTTPRequester creates a new instance of ClientHTTPRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientHTTPRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientHTTPRequester {
	mock := &ClientHTTPRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
